#include <bits/stdc++.h>

#include "limits.cpp"
#include "rng.cpp"
#include "types.cpp"

using namespace std;
using pii = pair<int, int>;

// Parameters to tune
constexpr const double TEMP_START = 10;
constexpr const double TEMP_END = 0.001;

// coordinates are (x, y)
#if TESTCASE == 36
// 26^2 + 20^2 < 33^2
const vector<pii> PATH({
    {392, 383}, {392, 383}, {381, 393}, {393, 381}, {385, 385}, {384, 387}, {393, 385}, {375, 381}, {385, 386}, {373, 382}, {382, 393}, {363, 384}, {368, 388}, {363, 375}, {368, 399}, {361, 385}, {364, 386}, {354, 377}, {373, 384}, {352, 387}, {371, 396}, {350, 398}, {375, 391}, {365, 398}, {374, 394}, {366, 402}, {371, 383}, {361, 398}, {359, 374}, {356, 403}, {364, 383}, {363, 409}, {369, 386}, {366, 401}, {370, 382}, {356, 393}, {366, 380}, {356, 399}, {355, 387}, {362, 401}, {341, 389}, {362, 395}, {339, 390}, {366, 383}, {344, 387}, {372, 379}, {348, 373}, {370, 379}, {361, 380}, {368, 377}, {361, 371}, {360, 375}, {357, 373}, {364, 368}, {364, 371}, {359, 379}, {353, 364}, {364, 390}, {346, 367}, {369, 386}, {352, 378}, {373, 391}, {359, 386}, {371, 379}, {371, 386}, {369, 379}, {368, 379}, {362, 378}, {378, 387}, {354, 384}, {366, 393}, {349, 393}, {355, 385}, {348, 384}, {360, 380}, {347, 389}, {365, 384}, {342, 398}, {360, 375}, {345, 392}, {356, 389}, {342, 397}, {361, 379}, {349, 395}, {353, 378}, {341, 400}, {352, 375}, {349, 395}, {353, 367}, {343, 392}, {342, 375}, {352, 381}, {347, 379}, {362, 371}, {357, 381}, {359, 373}, {350, 380}, {353, 380}, {354, 384}, {348, 382}, {358, 384}, {338, 382}, {345, 388}, {336, 385}, {351, 378}, {341, 399}, {363, 380}, {341, 396}, {354, 383}, {348, 400}, {342, 379}, {349, 397}, {337, 383}, {344, 389}, {348, 385}, {344, 381}, {359, 387}, {357, 383}, {364, 373}, {344, 378}, {350, 376}, {351, 378}, {341, 383}, {361, 389}, {338, 381}, {365, 383}, {350, 383}, {355, 374}, {353, 385}, {353, 381}, {358, 378}, {341, 381}, {358, 393}, {350, 381}, {347, 400}, {357, 374}, {348, 386}, {345, 366}, {342, 383}, {354, 362}, {343, 382}, {340, 358}, {345, 378}, {343, 360}, {339, 386}, {354, 365}, {336, 373}, {349, 359}, {339, 385}, {358, 368}, {336, 387}, {355, 376}, {344, 378}, {341, 377}, {355, 381}, {336, 388}, {354, 369}, {346, 377}, {349, 369}, {356, 381}, {358, 371}, {352, 394}, {363, 384}, {347, 394}, {361, 395}, {341, 391}, {360, 395}, {344, 380}, {364, 383}, {354, 387}, {377, 385}, {365, 382}, {381, 388}, {361, 394}, {383, 392}, {359, 383}, {389, 383}, {360, 384}, {377, 386}, {349, 394}, {365, 383}, {339, 385}, {366, 379}, {347, 390}, {360, 368}, {345, 393}, {354, 372}, {350, 381}, {352, 364}, {352, 390}, {338, 367}, {357, 376}, {338, 380}, {359, 371}, {338, 383}, {360, 379}, {346, 381}, {357, 374}, {347, 372}, {345, 368}, {345, 367}, {352, 359}, {346, 360}, {344, 361}, {337, 370}, {345, 368}, {323, 375}, {335, 359}, {320, 377}, {340, 367}, {325, 369}, {348, 355}, {323, 368}, {348, 360}, {331, 368}, {350, 370}, {343, 377}, {357, 371}, {341, 378}, {350, 368}, {345, 372}, {352, 365}, {348, 358}, {353, 370}, {335, 365}, {343, 365}, {338, 358}, {338, 360}, {331, 353}, {331, 353}, {331, 357}, {334, 360}, {334, 348}, {324, 362}, {339, 361}, {316, 359}, {330, 366}, {327, 354}, {333, 372}, {334, 351}, {329, 379}, {324, 358}, {334, 377}, {329, 360}, {341, 368}, {334, 362}, {355, 371}, {335, 363}, {351, 366}, {340, 368}, {350, 354}, {344, 364}, {351, 364}, {352, 370}, {344, 369}, {349, 368}, {353, 378}, {353, 368}, {358, 368}, {352, 358}, {364, 375}, {343, 358}, {352, 378}, {333, 355}, {345, 367}, {342, 363}, {342, 377}, {338, 376}, {329, 383}, {348, 376}, {323, 373}, {350, 381}, {337, 371}, {347, 367}, {330, 374}, {359, 367}, {340, 378}, {352, 358}, {341, 380}, {352, 367}, {336, 367}, {339, 362}, {350, 368}, {349, 366}, {344, 355}, {358, 357}, {336, 343}, {351, 367}, {327, 352}, {354, 357}, {335, 341}, {350, 365}, {342, 353}, {339, 359}, {341, 356}, {348, 355}, {343, 344}, {351, 355}, {344, 339}, {343, 359}, {344, 340}, {342, 360}, {351, 352}, {355, 358}, {359, 346}, {350, 346}, {357, 359}, {351, 344}, {346, 356}, {355, 335}, {358, 362}, {364, 347}, {356, 352}, {357, 341}, {350, 348}, {350, 329}, {341, 351}, {346, 340}, {342, 339}, {343, 338}, {354, 347}, {343, 340}, {346, 358}, {353, 334}, {355, 357}, {351, 342}, {348, 349}, {363, 347}, {344, 335}, {356, 338}, {331, 331}, {350, 325}, {322, 325}, {342, 324}, {335, 329}, {349, 332}, {338, 315}, {339, 329}, {337, 314}, {343, 317}, {332, 305}, {332, 308}, {328, 301}, {332, 301}, {324, 293}, {330, 304}, {325, 282}, {334, 297}, {325, 287}, {339, 308}, {330, 283}, {334, 298}, {318, 274}, {337, 297}, {329, 275}, {324, 294}, {320, 281}, {323, 290}, {315, 280}, {332, 284}, {321, 286}, {346, 289}, {321, 287}, {338, 291}, {331, 283}, {331, 295}, {318, 277}, {339, 290}, {323, 265}, {336, 285}, {332, 261}, {342, 289}, {337, 260}, {335, 278}, {345, 252}, {346, 275}, {344, 253}, {339, 272}, {339, 250}, {326, 269}, {349, 257}, {323, 269}, {346, 251}, {326, 271}, {342, 249}, {333, 277}, {342, 260}, {333, 272}, {329, 256}, {322, 263}, {343, 258}, {318, 270}, {347, 264}, {327, 281}, {342, 275}, {335, 279}, {345, 270}, {330, 286}, {345, 285}, {334, 290}, {347, 298}, {322, 292}, {342, 307}, {320, 296}, {330, 301}, {320, 307}, {325, 296}, {332, 298}, {331, 283}, {346, 303}, {332, 290}, {343, 302}, {346, 285}, {352, 300}, {335, 280}, {349, 288}, {343, 287}, {358, 287}, {338, 282}, {354, 279}, {329, 287}, {352, 276}, {332, 284}, {347, 287}, {341, 287}, {341, 294}, {327, 288}, {341, 293}, {339, 295}, {331, 288}, {349, 300}, {328, 296}, {353, 287}, {327, 295}, {347, 300}, {330, 302}, {354, 287}, {336, 301}, {343, 282}, {345, 310}, {339, 290}, {350, 305}, {339, 301}, {351, 304}, {341, 293}, {345, 314}, {350, 303}, {334, 308}, {342, 307}, {347, 315}, {344, 311}, {338, 322}, {342, 317}, {335, 330}, {329, 317}, {324, 339}, {320, 318}, {321, 336}, {311, 321}, {310, 344}, {309, 330}, {312, 335}, {320, 340}, {319, 332}, {310, 329}, {324, 329}, {297, 333}, {316, 319}, {299, 323}, {314, 305}, {309, 313}, {323, 316}, {303, 314}, {331, 309}, {309, 311}, {322, 307}, {311, 325}, {318, 310}, {309, 318}, {312, 309}, {299, 327}, {311, 317}, {305, 322}, {323, 318}, {295, 325}, {312, 312}, {301, 327}, {305, 313}, {308, 330}, {309, 327}, {308, 322}, {305, 341}, {312, 312}, {309, 339}, {322, 313}, {309, 333}, {326, 315}, {306, 329}, {319, 319}, {312, 323}, {330, 324}, {305, 333}, {323, 331}, {317, 331}, {319, 343}, {316, 323}, {309, 344}, {317, 329}, {319, 344}, {318, 323}, {308, 350}, {309, 323}, {305, 348}, {317, 323}, {308, 349}, {320, 334}, {314, 362}, {311, 339}, {317, 356}, {315, 352}, {311, 361}, {309, 343}, {315, 368}, {307, 345}, {308, 365}, {312, 339}, {320, 365}, {302, 344}, {313, 368}, {314, 348}, {322, 361}, {306, 350}, {332, 351}, {318, 353}, {329, 342}, {320, 349}, {321, 337}, {332, 343}, {311, 343}, {333, 339}, {313, 344}, {319, 335}, {302, 334}, {328, 334}, {312, 341}, {326, 329}, {322, 332}, {329, 315}, {336, 336}, {320, 313}, {330, 336}, {314, 319}, {342, 327}, {325, 316}, {333, 315}, {334, 311}, {334, 328}, {326, 305}, {323, 318}, {339, 300}, {324, 321}, {331, 300}, {323, 312}, {318, 298}, {323, 308}, {323, 290}, {328, 300}, {322, 283}, {321, 289}, {336, 284}, {319, 303}, {329, 283}, {314, 304}, {337, 291}, {314, 309}, {334, 298}, {311, 308}, {339, 298}, {324, 310}, {334, 286}, {326, 301}, {344, 287}, {327, 297}, {341, 299}, {341, 299}, {345, 291}, {347, 290}, {351, 302}, {336, 280}, {351, 290}, {346, 270}, {355, 279}, {342, 263}, {362, 276}, {348, 264}, {367, 272}, {340, 272}, {357, 279}, {330, 277}, {353, 270}, {336, 286}, {340, 276}, {348, 292}, {334, 275}, {343, 283}, {334, 287}, {339, 281}, {323, 289}, {340, 291}, {332, 298}, {332, 303}, {332, 308}, {320, 308}, {329, 307}, {314, 310}, {318, 315}, {317, 306}, {325, 306}, {331, 305}, {335, 305}, {322, 296}, {324, 305}, {326, 301}, {316, 311}, {337, 311}, {312, 309}, {333, 323}, {319, 308}, {335, 322}, {329, 316}, {349, 318}, {328, 316}, {345, 319}, {331, 305}, {335, 330}, {340, 315}, {334, 331}, {331, 312}, {337, 329}, {322, 318}, {342, 321}, {331, 323}, {329, 318}, {337, 335}, {334, 322}, {346, 337}, {335, 314}, {353, 334}, {341, 322}, {345, 325}, {337, 316}, {334, 323}, {331, 328}, {324, 326}, {323, 325}, {313, 325}, {336, 323}, {307, 318}, {322, 325}, {299, 325}, {317, 322}, {289, 319}, {305, 318}, {293, 325}, {303, 326}, {287, 320}, {308, 327}, {298, 330}, {310, 336}, {308, 323}, {304, 337}, {308, 314}, {310, 337}, {313, 311}, {315, 333}, {312, 310}, {306, 323}, {305, 320}, {297, 323}, {316, 319}, {293, 328}, {311, 329}, {299, 324}, {325, 333}, {306, 321}, {314, 343}, {300, 329}, {314, 340}, {311, 333}, {313, 354}, {323, 338}, {325, 350}, {330, 342}, {339, 354}, {335, 338}, {352, 354}, {337, 333}, {341, 347}, {347, 336}, {339, 344}, {342, 324}, {334, 344}, {348, 331}, {331, 353}, {338, 331}, {332, 360}, {332, 343}, {337, 349}, {324, 343}, {345, 355}, {336, 347}, {336, 353}, {330, 355}, {348, 344}, {332, 341}, {355, 339}, {331, 327}, {358, 339}, {333, 333}, {346, 337}, {331, 330}, {349, 338}, {322, 326}, {350, 334}, {333, 335}, {346, 333}, {334, 337}, {350, 346}, {339, 327}, {340, 350}, {337, 332}, {330, 361}, {342, 336}, {334, 352}, {336, 338}, {325, 355}, {334, 331}, {324, 352}, {329, 343}, {328, 359}, {335, 336}, {335, 360}, {334, 342}, {338, 370}, {343, 341}, {343, 360}, {355, 342}, {343, 351}, {348, 334}, {330, 353}, {337, 336}, {320, 343}, {333, 322}, {315, 336}, {329, 313}, {312, 324}, {336, 318}, {313, 328}, {325, 319}, {327, 325}, {318, 330}, {327, 332}, {314, 322}, {323, 329}, {306, 321}, {323, 332}, {296, 331}, {314, 332}, {293, 319}, {308, 331}, {287, 325}, {304, 322}, {286, 325}, {295, 319}, {290, 326}, {289, 327}, {290, 322}, {285, 325}, {300, 331}, {277, 329}, {301, 334}, {273, 338}, {298, 341}, {273, 343}, {294, 331}, {273, 338}, {299, 326}, {279, 347}, {296, 337}, {274, 341}, {296, 331}, {267, 337}, {289, 323}, {273, 344}, {278, 321}, {269, 342}, {276, 323}, {268, 329}, {268, 319}, {268, 318}, {272, 328}, {256, 309}, {259, 334}, {257, 323}, {245, 339}, {248, 313}, {259, 334}, {252, 318}, {257, 344}, {251, 322}, {242, 344}, {254, 333}, {245, 338}, {268, 338}, {243, 324}, {260, 337}, {241, 338}, {264, 349}, {250, 331}, {260, 342}, {259, 327}, {272, 346}, {256, 329}, {268, 334}, {245, 338}, {257, 337}, {236, 338}, {246, 328}, {242, 349}, {234, 325}, {230, 340}, {224, 322}, {225, 341}, {230, 318}, {239, 346}, {223, 325}, {243, 343}, {218, 328}, {235, 339}, {227, 322}, {233, 338}, {228, 331}, {238, 342}, {239, 322}, {241, 336}, {230, 310}, {250, 331}, {226, 319}, {236, 326}, {218, 327}, {235, 329}, {212, 316}, {227, 324}, {222, 320}, {228, 326}, {217, 315}, {223, 337}, {213, 309}, {226, 324}, {213, 313}, {223, 327}, {214, 318}, {228, 333}, {221, 317}, {228, 328}, {219, 306}, {225, 320}, {217, 300}, {218, 328}, {221, 304}, {224, 321}, {230, 308}, {221, 312}, {240, 313}, {227, 313}, {241, 315}, {223, 317}, {236, 329}, {224, 315}, {241, 324}, {234, 322}, {234, 315}, {232, 309}, {234, 315}, {237, 314}, {245, 322}, {247, 315}, {246, 334}, {253, 307}, {244, 333}, {258, 317}, {245, 344}, {255, 326}, {248, 338}, {253, 325}, {247, 346}, {243, 319}, {247, 332}, {240, 327}, {243, 334}, {236, 315}, {230, 337}, {238, 327}, {238, 329}, {245, 331}, {228, 334}, {235, 324}, {223, 338}, {225, 318}, {219, 329}, {219, 305}, {232, 327}, {228, 314}, {241, 317}, {240, 307}, {233, 314}, {230, 310}, {241, 310}, {229, 322}, {235, 317}, {239, 333}, {242, 323}, {237, 335}, {244, 326}, {230, 331}, {230, 323}, {236, 339}, {221, 333}, {225, 347}, {228, 332}, {231, 340}, {222, 332}, {245, 341}, {224, 326}, {239, 340}, {217, 322}, {232, 333}, {211, 312}, {239, 320}, {215, 319}, {234, 328}, {222, 328}, {247, 325}, {231, 339}, {234, 327}, {229, 348}, {227, 329}, {227, 337}, {222, 324}, {222, 330}, {220, 318}, {234, 334}, {229, 326}, {227, 325}, {226, 335}, {237, 325}, {238, 342}, {248, 333}, {243, 332}, {245, 325}, {241, 324}, {255, 331}, {253, 324}, {261, 342}, {257, 335}, {257, 351}, {247, 343}, {266, 347}, {245, 357}, {269, 353}, {250, 371}, {278, 362}, {251, 370}, {278, 374}, {251, 368}, {276, 367}, {256, 366}, {281, 368}, {262, 368}, {273, 373}, {257, 370}, {283, 380}, {271, 368}, {275, 391}, {277, 375}, {281, 394}, {277, 373}, {270, 394}, {290, 379}, {283, 399}, {293, 385}, {291, 408}, {283, 392}, {284, 399}, {277, 388}, {288, 390}, {276, 375}, {291, 389}, {283, 380}, {295, 392}, {276, 386}, {290, 395}, {278, 385}, {286, 408}, {271, 390}, {278, 411}, {276, 382}, {266, 409}, {276, 394}, {273, 396}, {285, 404}, {272, 410}, {288, 393}, {282, 400}, {283, 389}, {270, 404}, {275, 393}, {272, 394}, {273, 406}, {267, 395}, {265, 409}, {264, 399}, {274, 412}, {267, 400}, {286, 416}, {275, 397}, {287, 407}, {267, 391}, {283, 400}, {276, 392}, {289, 389}, {275, 404}, {285, 399}, {261, 404}, {276, 392}, {260, 412}, {283, 403}, {264, 407}, {279, 408}, {270, 419}, {269, 404}, {262, 414}, {281, 406}, {259, 408}, {276, 412}, {250, 401}, {268, 423}, {259, 410}, {266, 423}, {265, 420}, {275, 435}, {264, 416}, {263, 431}, {270, 414}, {265, 434}, {281, 419}, {277, 427}, {274, 431}, {268, 426}, {268, 424}, {280, 426}, {260, 420}, {278, 424}, {267, 422}, {269, 423}, {263, 412}, {263, 418}, {268, 416}, {266, 430}, {274, 416}, {273, 420}, {260, 416}, {262, 424}, {260, 418}, {260, 419}, {259, 421}, {272, 417}, {262, 409}, {270, 407}, {255, 409}, {268, 403}, {258, 413}, {258, 405}, {264, 412}, {264, 396}, {256, 403}, {268, 391}, {258, 405}, {265, 395}, {269, 413}, {256, 386}, {280, 404}, {267, 390}, {271, 410}, {253, 391}, {268, 407}, {256, 394}, {272, 419}, {269, 393}, {272, 418}, {272, 393}, {278, 405}, {265, 406}, {265, 412}, {267, 418}, {267, 411}, {274, 426}, {268, 418}, {269, 417}, {272, 408}, {283, 415}, {276, 415}, {285, 425}, {266, 415}, {281, 417}, {273, 424}, {273, 427}, {286, 431}, {280, 421}, {284, 439}, {273, 434}, {280, 444}, {274, 426}, {279, 447}, {269, 419}, {278, 439}, {275, 424}, {283, 429}, {285, 414}, {280, 431}, {277, 421}, {281, 437}, {275, 417}, {279, 433}, {270, 430}, {275, 421}, {281, 422}, {264, 414}, {274, 423}, {258, 410}, {273, 410}, {265, 412}, {262, 415}, {259, 408}, {255, 406}, {270, 399}, {253, 404}, {275, 399}, {247, 403}, {262, 405}, {257, 395}, {275, 410}, {255, 389}, {271, 408}, {260, 400}, {272, 407}, {252, 396}, {271, 415}, {246, 406}, {267, 422}, {256, 405}, {263, 413}, {258, 391}, {271, 412}, {248, 400}, {266, 410}, {254, 393}, {266, 405}, {246, 388}, {263, 391}, {234, 390}, {258, 378}, {229, 382}, {253, 384}, {242, 377}, {259, 383}, {236, 386}, {247, 384}, {238, 393}, {241, 380}, {233, 401}, {234, 376}, {240, 403}, {249, 376}, {251, 400}, {256, 384}, {253, 406}, {248, 378}, {251, 394}, {246, 370}, {251, 397}, {251, 380}, {255, 395}, {258, 377}, {250, 388}, {264, 369}, {258, 392}, {272, 375}, {253, 394}, {263, 374}, {265, 394}, {270, 376}, {255, 388}, {262, 377}, {267, 392}, {269, 377}, {275, 389}, {260, 369}, {264, 386}, {266, 358}, {276, 381}, {265, 362}, {282, 369}, {264, 355}, {281, 378}, {269, 357}, {273, 375}, {263, 351}, {266, 375}, {271, 353}, {260, 363}, {268, 356}, {249, 353}, {273, 357}, {246, 350}, {265, 350}, {246, 365}, {259, 363}, {237, 376}, {260, 367}, {245, 383}, {249, 365}, {243, 370}, {252, 362}, {250, 380}, {252, 359}, {263, 381}, {250, 361}, {257, 387}, {263, 360}, {252, 374}, {258, 374}, {251, 380}, {249, 362}, {249, 385}, {261, 364}, {242, 373}, {251, 368}, {245, 377}, {241, 370}, {245, 381}, {250, 382}, {240, 395}, {247, 396}, {230, 384}, {257, 392}, {233, 383}, {249, 389}, {246, 384}, {239, 398}, {250, 374}, {233, 390}, {238, 370}, {234, 392}, {250, 379}, {246, 398}, {238, 382}, {248, 386}, {245, 369}, {259, 385}, {251, 380}, {255, 396}, {247, 383}, {250, 388}, {249, 372}, {252, 375}, {240, 382}, {248, 376}, {243, 380}, {259, 366}, {250, 370}, {247, 369}, {251, 365}, {237, 366}, {257, 357}, {231, 365}, {256, 368}, {246, 365}, {267, 368}, {246, 373}, {268, 357}, {243, 369}, {268, 353}, {241, 363}, {257, 352}, {239, 355}, {266, 359}, {253, 355}, {265, 371}, {254, 351}, {270, 364}, {257, 355}, {268, 363}, {252, 354}, {259, 363}, {250, 342}, {273, 358}, {257, 339}, {271, 357}, {253, 333}, {268, 353}, {260, 340}, {276, 354}, {273, 334}, {276, 363}, {269, 344}, {275, 352}, {273, 355}, {268, 355}, {262, 351}, {260, 363}, {260, 364}, {258, 376}, {253, 364}, {258, 362}, {256, 359}, {259, 350}, {250, 359}, {269, 340}, {250, 351}, {273, 348}, {263, 358}, {271, 356}, {267, 366}, {276, 347}, {271, 365}, {268, 338}, {270, 356}, {258, 340}, {274, 346}, {264, 340}, {260, 341}, {252, 346}, {256, 328}, {257, 355}, {261, 342}, {252, 346}, {268, 334}, {263, 339}, {268, 347}, {264, 351}, {270, 357}, {254, 356}, {270, 344}, {256, 364}, {276, 355}, {270, 367}, {273, 358}, {272, 372}, {277, 347}, {274, 365}, {265, 346}, {269, 366}, {277, 347}, {276, 375}, {269, 353}, {284, 372}, {262, 364}, {284, 379}, {262, 362}, {284, 375}, {264, 356}, {277, 381}, {268, 355}, {279, 380}, {268, 362}, {279, 385}, {275, 371}, {267, 390}, {276, 378}, {271, 401}, {262, 383}, {277, 405}, {275, 388}, {279, 404}, {265, 382}, {285, 401}, {275, 391}, {274, 405}, {277, 404}, {281, 400}, {269, 409}, {271, 402}, {266, 401}, {274, 411}, {260, 407}, {263, 413}, {272, 410}, {270, 415}, {275, 409}, {279, 408}, {275, 405}, {286, 421}, {285, 410}, {281, 432}, {286, 410}, {276, 433}, {284, 424}, {278, 427}, {272, 427}, {265, 431}, {268, 431}, {264, 422}, {274, 432}, {260, 413}, {272, 428}, {262, 404}, {277, 427}, {271, 411}, {274, 422}, {275, 406}, {280, 409}, {287, 413}, {268, 404}, {292, 413}, {276, 393}, {292, 403}, {276, 403}, {279, 401}, {272, 412}, {288, 403}, {283, 411}, {277, 411}, {286, 400}, {289, 409}, {296, 401}, {277, 406}, {298, 408}, {272, 413}, {289, 407}, {276, 400}, {288, 404}, {265, 403}, {291, 393}, {266, 389}, {284, 396}, {279, 391}, {278, 407}, {278, 391}, {267, 398}, {288, 386}, {276, 404}, {279, 395}, {275, 403}, {283, 391}, {285, 404}, {278, 377}, {282, 397}, {280, 372}, {286, 399}, {269, 381}, {287, 400}, {264, 394}, {287, 404}, {261, 391}, {276, 402}, {271, 381}, {276, 405}, {268, 388}, {264, 412}, {277, 388}, {267, 400}, {268, 379}, {267, 388}, {260, 376}, {268, 384}, {261, 378}, {263, 397}, {257, 368}, {256, 391}, {252, 374}, {267, 398}, {255, 379}, {274, 400}, {261, 385}, {287, 399}, {266, 378}, {276, 398}, {260, 390}, {274, 395}, {275, 390}, {283, 394}, {274, 376}, {280, 393}, {262, 384}, {269, 384}, {273, 391}, {266, 398}, {277, 385}, {256, 387}, {275, 380}, {269, 386}, {278, 384}, {273, 396}, {265, 388}, {281, 389}, {257, 383}, {280, 394}, {263, 396}, {284, 391}, {257, 388}, {284, 378}, {256, 377}, {279, 371}, {250, 368}, {276, 366}, {258, 356}, {279, 366}, {253, 368}, {278, 366}, {262, 364}, {278, 369}, {266, 357}, {276, 373}, {259, 356}, {270, 372}, {261, 354}, {266, 368}, {253, 344}, {272, 366}, {260, 354}, {279, 370}, {259, 358}, {281, 373}, {264, 356}, {286, 369}, {263, 362}, {273, 362}, {274, 368}, {267, 366}, {279, 378}, {263, 368}, {275, 364}, {276, 375}, {275, 378}, {263, 378}, {272, 377}, {256, 381}, {282, 381}, {264, 371}, {282, 369}, {271, 370}, {285, 382}, {280, 372}, {272, 386}, {274, 372}, {262, 388}, {284, 381}, {273, 383}, {277, 369}, {269, 384}, {276, 371}, {265, 387}, {271, 364}, {251, 386}, {263, 374}, {265, 387}, {253, 365}, {265, 387}, {256, 376}, {256, 389}, {263, 383}, {254, 394}, {252, 376}, {259, 400}, {243, 382}, {247, 396}, {244, 370}, {236, 388}, {238, 364}, {246, 391}, {236, 371}, {252, 386}, {229, 371}, {244, 379}, {231, 383}, {238, 388}, {243, 389}, {250, 383}, {247, 388}, {244, 396}, {259, 386}, {243, 402}, {257, 385}, {242, 391}, {266, 385}, {242, 382}, {264, 383}, {246, 377}, {261, 395}, {246, 377}, {261, 402}, {250, 381}, {267, 405}, {251, 384}, {264, 410}, {261, 389}, {257, 400}, {259, 390}, {249, 405}, {248, 388}, {262, 403}, {250, 382}, {262, 402}, {245, 395}, {266, 388}, {240, 401}, {269, 396}, {248, 394}, {264, 393}, {239, 405}, {265, 393}, {241, 402}, {259, 400}, {245, 392}, {258, 387}, {241, 383}, {251, 385}, {244, 376}, {256, 380}, {238, 385}, {253, 390}, {247, 388}, {262, 382}, {243, 377}, {255, 391}, {247, 385}, {267, 383}, {258, 377}, {265, 383}, {264, 386}, {252, 390}, {262, 387}, {247, 377}, {265, 373}, {244, 376}, {269, 381}, {244, 376}, {260, 378}, {251, 377}, {262, 376}, {260, 379}, {248, 380}, {268, 391}, {259, 376}, {266, 392}, {271, 370}, {267, 382}, {274, 361}, {280, 386}, {276, 372}, {284, 372}, {281, 377}, {275, 382}, {287, 381}, {268, 374}, {291, 391}, {275, 374}, {295, 386}, {274, 382}, {281, 388}, {274, 381}, {288, 388}, {284, 375}, {282, 395}, {284, 388}, {273, 394}, {295, 396}, {274, 394}, {295, 393}, {278, 394}, {285, 399}, {274, 387}, {279, 390}, {274, 397}, {280, 382}, {263, 402}, {284, 388}, {268, 396}, {273, 382}, {271, 395}, {263, 371}, {278, 394}, {269, 381}, {268, 397}, {264, 374}, {262, 402}, {276, 381}, {264, 398}, {272, 383}, {266, 406}, {261, 393}, {258, 400}, {251, 385}, {247, 393}, {248, 397}, {256, 399}, {247, 383}, {266, 401}, {239, 392}, {268, 397}, {241, 392}, {260, 395}, {239, 386}, {260, 383}, {251, 383}, {252, 382}, {262, 378}, {256, 388}, {268, 371}, {269, 389}, {264, 377}, {263, 384}, {257, 369}, {252, 388}, {263, 376}, {265, 382}, {268, 387}, {278, 388}, {274, 387}, {271, 391}, {272, 373}, {276, 400}, {269, 386}, {287, 390}, {261, 389}, {281, 393}, {267, 396}, {270, 400}, {275, 400}, {276, 390}, {263, 401}, {273, 382}, {263, 392}, {285, 387}, {264, 379}, {285, 372}, {275, 373}, {281, 370}, {280, 368}, {286, 371}, {282, 374}, {287, 369}, {287, 383}, {287, 376}, {284, 378}, {278, 382}, {282, 389}, {292, 385}, {275, 402}, {290, 386}, {274, 395}, {293, 384}, {267, 397}, {285, 387}, {279, 392}, {277, 376}, {271, 402}, {269, 374}, {274, 403}, {261, 382}, {281, 391}, {258, 388}, {282, 381}, {264, 380}, {278, 393}, {267, 384}, {279, 380}, {276, 384}, {278, 367}, {284, 392}, {272, 375}, {274, 392}, {279, 385}, {274, 403}, {271, 392}, {277, 401}, {258, 389}, {281, 400}, {260, 403}, {272, 411}, {253, 399}, {274, 404}, {251, 413}, {270, 393}, {255, 412}, {260, 383}, {254, 408}, {260, 395}, {257, 408}, {254, 403}, {263, 395}, {248, 392}, {253, 401}, {244, 406}, {248, 403}, {248, 393}, {237, 398}, {247, 386}, {249, 397}, {237, 396}, {251, 395}, {245, 400}, {255, 407}, {235, 390}, {245, 396}, {237, 390}, {258, 398}, {234, 402}, {258, 400}, {234, 387}, {250, 388}, {235, 375}, {250, 374}, {228, 388}, {250, 377}, {230, 383}, {237, 383}, {238, 373}, {235, 382}, {246, 370}, {240, 396}, {256, 381}, {239, 405}, {250, 378}, {248, 395}, {246, 389}, {257, 405}, {250, 378}, {253, 400}, {251, 373}, {265, 396}, {254, 385}, {277, 397}, {261, 389}, {263, 396}, {267, 394}, {270, 400}, {255, 385}, {257, 406}, {241, 381}, {246, 399}, {237, 384}, {250, 403}, {250, 378}, {237, 402}, {236, 377}, {223, 401}, {236, 375}, {234, 401}, {236, 390}, {236, 401}, {247, 387}, {236, 397}, {236, 378}, {224, 396}, {243, 382}, {232, 398}, {236, 393}, {231, 399}, {225, 401}, {242, 391}, {219, 399}, {235, 393}, {227, 394}, {233, 386}, {220, 405}, {220, 393}, {226, 392}, {219, 405}, {227, 402}, {209, 401}, {232, 403}, {218, 401}, {221, 399}, {210, 405}, {225, 399}, {209, 406}, {230, 402}, {213, 400}, {243, 400}, {223, 404}, {253, 404}, {229, 396}, {241, 395}, {237, 397}, {240, 387}, {231, 403}, {240, 384}, {225, 398}, {252, 391}, {228, 387}, {251, 389}, {237, 380}, {241, 384}, {241, 383}, {234, 382}, {243, 390}, {230, 369}, {250, 379}, {229, 371}, {246, 371}, {236, 363}, {256, 374}, {242, 356}, {252, 370}, {248, 360}, {255, 362}, {239, 361}, {246, 368}, {231, 366}, {257, 376}, {230, 370}, {258, 362}, {235, 374}, {260, 376}, {240, 371}, {255, 376}, {236, 358}, {256, 375}, {240, 365}, {263, 375}, {238, 360}, {263, 367}, {240, 372}, {266, 365}, {247, 372}, {273, 371}, {244, 369}, {267, 366}, {242, 369}, {269, 368}, {241, 374}, {267, 372}, {242, 368}, {264, 378}, {244, 376}, {265, 390}, {245, 370}, {255, 388}, {257, 363}, {245, 384}, {256, 375}, {242, 390}, {258, 388}, {241, 383}, {250, 376}, {253, 375}, {241, 380}, {238, 375}, {231, 376}, {236, 383}, {233, 372}, {243, 382}, {230, 386}, {250, 387}, {229, 400}, {245, 396}, {223, 388}, {237, 384}, {234, 382}, {224, 391}, {233, 386}, {224, 396}, {242, 381}, {232, 388}, {236, 369}, {225, 395}, {243, 372}, {227, 383}, {238, 365}, {232, 391}, {242, 365}, {235, 392}, {243, 378}, {230, 401}, {236, 376}, {230, 399}, {247, 384}, {232, 402}, {241, 383}, {227, 404}, {246, 390}, {230, 402}, {248, 387}, {229, 393}, {239, 385}, {236, 392}, {241, 386}, {247, 395}
});
#elif TESTCASE == 37
const vector<pii> PATH({
    {95, 900}, {125, 950}, {155, 900},
    {220, 105}, {250,  50}, {280, 105},
    {345, 895}, {375, 950}, {405, 895},
    {470, 110}, {500,  50}, {530, 110},
    {595, 890}, {625, 950}, {655, 890},
    {720, 115}, {750,  50}, {780, 115},
    {845, 885}, {875, 951}, {905, 885},
    {950, 0}
});
#else
fail with compile error
#endif

Hero hero;
Game game;
Monster monster[N];

inline int square(const int x) {
    return x * x;
}

Rng rng(8);

int calculate_fatigue(const bitset<N>& killed, const int x, const int y) {
    int fatigue = 0;
    for (int i=0; i<game.num_monsters; ++i) {
        if (!killed[i] && square(monster[i].x - x) + square(monster[i].y - y) <= square(monster[i].range)) fatigue += monster[i].attack;
    }
    return fatigue;
}

pii follow_path(const vector<pii>& path, vector<Action>& actions) {
    hero.reset();
    actions.clear();
    bitset<N> killed;

    int x = game.start_x, y = game.start_y;
    int gold = 0;
    int fatigue = 0;
    int i = 0;
    while (i < (int)path.size()) {
        pii p = path[i];
        p.first += rng.next_int(-5, 5);
        p.second += rng.next_int(-5, 5);
        for (int i=0; i<game.num_monsters; ++i) {
            if (!killed[i] && monster[i].hp < 10000 && square(monster[i].x - x) + square(monster[i].y - y) <= square(hero.get_range())) {
                const int added_turns = (monster[i].hp + hero.get_power() - 1) / hero.get_power();
                fatigue += (added_turns - 1) * calculate_fatigue(killed, x, y);
                for (int p=0; p<added_turns; ++p) actions.emplace_back("attack", monster[i].id);
                if ((int)actions.size() > game.num_turns) {
                    break;
                }
                gold += 1000 * monster[i].gold / (1000 + fatigue);
                hero.add_exp(monster[i].exp);
                killed[i] = true;
                fatigue += calculate_fatigue(killed, x, y);
                ++i;
                continue;
            }
        }

        double dx = p.first - x, dy = p.second - y;
        const int spd = x < 125 ? hero.get_speed() : min(hero.get_range(), hero.get_speed());
        const double mag = sqrt(min(square(spd) / (dx * dx + dy * dy), 1.0));

        dx *= mag;
        dy *= mag;

        const int nx0 = x + (int)(dx - 1);
        const int nx1 = x + (int)dx;
        const int nx2 = x + (int)(dx + 1);
        const int ny0 = y + (int)(dy - 1);
        const int ny1 = y + (int)dy;
        const int ny2 = y + (int)(dy + 1);

        const vector<pii> options({{nx0, ny0}, {nx0, ny1}, {nx0, ny2}, {nx1, ny0}, {nx1, ny1}, {nx1, ny2}, {nx2, ny0}, {nx2, ny1}, {nx2, ny2}});
        const pii nxt = *min_element(options.begin(), options.end(), [&p, &x, &y](const pii& a, const pii& b) {
            bool a_reachable = square(a.first - x) + square(a.second - y) <= square(hero.get_speed());
            bool b_reachable = square(b.first - x) + square(b.second - y) <= square(hero.get_speed());
            if (!a_reachable || !b_reachable) return a_reachable > b_reachable;

            const int a_rem = square(p.first - a.first) + square(p.second - a.second);
            const int b_rem = square(p.first - b.first) + square(p.second - b.second);
            return a_rem < b_rem;
        });

        x = nxt.first;
        y = nxt.second;
        actions.emplace_back("move", x, y);
        fatigue += calculate_fatigue(killed, x, y);

        while (x == path[i].first && y == path[i].second) ++i;

        if ((int)actions.size() >= game.num_turns) break;
    }
    while ((int)actions.size() > game.num_turns) actions.pop_back();

    //cerr << "gold: " << gold << endl;
    return pii(gold, i);
}

vector<pii> mutate(vector<pii> path, const int n_used) {  // pass in a copy to mutate
    const int idx = rng.next_int(n_used);
    path[idx].first += rng.next_int(-5, 5);
    path[idx].second += rng.next_int(-5, 5);
    return path;
}

vector<Action> simulated_annealing(const int attempts, const chrono::milliseconds time_limit) {
    int best_score = 0;
    vector<pii> best_path;

    vector<Action> actions;

    for (int attempt=0; attempt<attempts; ++attempt) {
        cerr << "Starting attempt " << attempt + 1 << " of " << attempts << endl;
        const chrono::time_point start_time = chrono::steady_clock::now();

        int cur_score = 0;
        vector<pii> cur_path, path = PATH;

        int n_used = 1;
        //for (int i=0; i<iterations; ++i) {
        while (chrono::steady_clock::now() - start_time < time_limit) {
            // TODO: consider early termination if no new best is found after a while, signal handling for killing
            const vector<pii> new_path = mutate(path, n_used);

            const pii new_result = follow_path(new_path, actions);
            const int new_score = new_result.first;

            if (cur_score < new_score) {
                cur_score = new_score;
                cur_path = cur_path;
                path = new_path;  // TODO: try swapping instead?
                n_used = new_result.second;

                //cerr << "New current score: " << cur_score << endl;
            } else {
                //const double progress = (double)(i) / iterations;
                const double progress = (chrono::steady_clock::now() - start_time) / time_limit;
                const double temp = TEMP_START * pow(TEMP_END / TEMP_START, progress);
                if (rng.next_double() < exp((new_score - cur_score) / temp)) {
                    path = new_path;  // TODO: try swapping instead?
                    n_used = new_result.second;
                }
            }
        }

        if (best_score < cur_score) {
            best_score = cur_score;
            best_path = cur_path;
            cerr << "New best score: " << best_score << endl;
        }
    }

    follow_path(best_path, actions);
    return actions;
}

int main() {
    cin.tie(0)->sync_with_stdio(0);

    cin >> hero;
    cin >> game;
    assert(game.num_monsters <= N);
    assert(game.width <= W);
    assert(game.height <= H);
    for (int i=0; i<game.num_monsters; ++i) {
        monster[i].id = i;
        cin >> monster[i];
    }
    sort(monster, monster + game.num_monsters, [](const Monster& a, const Monster& b) {
        if (a.gold != b.gold) return a.gold > b.gold;
        if (a.exp != b.exp) return a.exp > b.exp;
        return a.id < b.id;
    });
    while (game.num_monsters > 1 && monster[game.num_monsters - 1].exp == 1 && monster[game.num_monsters - 1].gold == 1) --game.num_monsters;

    sort(monster, monster + game.num_monsters, [](const Monster& a, const Monster& b) {
        return (long long)a.hp * b.exp < (long long)b.hp * a.exp;  // sort by hp / exp
    });

    cerr << "Finished reading input." << endl;

    const vector<Action> answer = simulated_annealing(5, 10s);
    for (const Action& action: answer) {
        cout << action << '\n';
    }
}

