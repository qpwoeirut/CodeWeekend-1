import json

TESTS = 50

tests = [
    json.loads(open(f'inputs/{str(i + 1).zfill(3)}.json').read()) for i in range(TESTS)
]

max_width = max(map(lambda t: t["width"], tests))
max_height = max(map(lambda t: t["height"], tests))
max_n = max(map(lambda t: len(t["monsters"]), tests))

limits_code = [
    "// Generated by analyze.py",
    "#ifndef LIMITS_CPP",
    "#define LIMITS_CPP",
    "",
    "#include <array>",
    "#include \"types.cpp\"",
    ""
]

for i, test in enumerate(tests):
    limits_code.append(f"#{'if' if i == 0 else 'elif'} TESTCASE == {i + 1}")
    limits_code.append(f"constexpr const int N = {len(test['monsters'])};")
    limits_code.append(f"constexpr const int W = {test['width']};")
    limits_code.append(f"constexpr const int H = {test['height']};")

    exp = [m['exp'] for m in test["monsters"]]
    exp.sort(reverse=True)

    max_exp = sum(exp[:test["num_turns"]])
    level_cost = 0
    max_level = 0
    for level in range(1, 10000):
        incremental_cost = 1000 + level * (level - 1) * 50
        level_cost += incremental_cost
        if max_exp < level_cost:
            break

        max_level = level

    limits_code.append(f"constexpr const int MAX_LEVEL = {max_level};")

    # hero = test['hero']
    # hero_params = [hero['base_speed'], hero['base_power'], hero['base_range'], hero['level_speed_coeff'],
    #                hero['level_power_coeff'], hero['level_range_coeff']]
    # hero_params_str = ', '.join(map(str, hero_params))
    # limits_code.append(f"constexpr Hero hero({hero_params_str});")
    #
    # game_params = [test['start_x'], test['start_y'], test['width'], test['height'], test['num_turns'],
    #                len(test["monsters"])]
    # game_params_str = ', '.join(map(str, game_params))
    # limits_code.append(f"constexpr const Game game({game_params_str});")
    #
    # monster_lines = [
    #     f"\tMonster({i}, {m['x']}, {m['y']}, {m['hp']}, {m['gold']}, {m['exp']}, {m.get('range', 0)}, {m.get('attack', 0)}),"
    #     for i, m in enumerate(test["monsters"])
    # ]
    # limits_code.append("constexpr std::array<Monster, N> monsters = {")
    # limits_code.extend(monster_lines)
    # limits_code.append("};")

    # TODO: consider adding the array of monsters too

limits_code.append("#else")
limits_code.append(f"constexpr const int N = {max_n};")
limits_code.append(f"constexpr const int W = {max_width};")
limits_code.append(f"constexpr const int H = {max_height};")
limits_code.append(f"constexpr const int MAX_LEVEL = 25;")
limits_code.append("#endif // TESTCASE")
limits_code.append("#endif // LIMITS_CPP")

with open("solvers/limits.cpp", 'w') as fout:
    fout.write('\n'.join(limits_code))

# for i, test in enumerate(tests):
#     print(i, test["width"] * test["height"] * len(test["monsters"]))
